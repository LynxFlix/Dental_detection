import cv2
import torch
from pathlib import Path
from yolov5.models.common import DetectMultiBackend
from yolov5.utils.general import non_max_suppression, scale_coords
from yolov5.utils.datasets import letterbox
from yolov5.utils.plots import plot_one_box

# Load the YOLOv5 model
weights = r'C:\Users\HP\Downloads\yolov5\runs\train\yolov5s_results2\weights\last.pt'  # Replace with the path to your model
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = DetectMultiBackend(weights, device=device)
stride = model.stride
names = model.names  # Class names (e.g., "caries")
img_size = 416

# Open the camera
cap = cv2.VideoCapture(0)  # Use 0 for the default camera

if not cap.isOpened():
    print("Error: Could not open the camera.")
    exit()

print("Camera feed started. Press 'q' to quit.")

while True:
    ret, frame = cap.read()
    if not ret:
        print("Error: Failed to capture frame.")
        break

    # Preprocess the frame
    img = letterbox(frame, img_size, stride=stride, auto=True)[0]  # Resize
    img = img[:, :, ::-1].transpose(2, 0, 1)  # BGR to RGB, CHW format
    img = torch.from_numpy(img).to(device).float() / 255.0  # Normalize
    img = img.unsqueeze(0)  # Add batch dimension

    # Run inference
    pred = model(img)
    pred = non_max_suppression(pred, conf_thres=0.25, iou_thres=0.45)

    # Draw detections on the frame
    for det in pred[0]:
        if len(det):
            det[:, :4] = scale_coords(img.shape[2:], det[:, :4], frame.shape).round()
            for *xyxy, conf, cls in det:
                label = f"{names[int(cls)]} {conf:.2f}"
                plot_one_box(xyxy, frame, label=label, color=(255, 0, 0), line_thickness=2)

    # Display the frame
    cv2.imshow('Caries Detection', frame)

    # Break loop on 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
